#!/usr/bin/env python
# -*- coding: utf-8 -*-
import argparse
import logging
import os
import signal
from datetime import datetime

from influxdb.exceptions import InfluxDBClientError
from tinkerforge.ip_connection import IPConnection
from tinkerforge.bricklet_outdoor_weather import BrickletOutdoorWeather

from influxdb import InfluxDBClient

logger = logging.getLogger("OutdoorWeather")
logger.setLevel(logging.INFO)

# create console handler and set level to debug
ch = logging.StreamHandler()
ch.setLevel(logging.INFO)

# create formatter
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

# add formatter to ch
ch.setFormatter(formatter)

# add ch to logger
logger.addHandler(ch)

client = None


class OutdoorSensorExporter:

    def __init__(self, host, port, led_config, callback):
        if port is None:
            port = 4223

        self.led_config = led_config
        self.callback = callback
        # Create IP Connection
        self.ipcon = IPConnection()

        # Register IP Connection callbacks
        self.ipcon.register_callback(IPConnection.CALLBACK_ENUMERATE,
                                     self.cb_enumerate)
        self.ipcon.register_callback(IPConnection.CALLBACK_CONNECTED,
                                     self.cb_connected)

        # Connect to brickd, will trigger cb_connected
        self.ipcon.connect(host, port)

        self.ipcon.enumerate()

    # Callback handles device connections and configures possibly lost
    # configuration of lcd and temperature callbacks, backlight etc.
    def cb_enumerate(self, uid, connected_uid, position, hardware_version,
                     firmware_version, device_identifier, enumeration_type):
        if enumeration_type == IPConnection.ENUMERATION_TYPE_CONNECTED or \
                enumeration_type == IPConnection.ENUMERATION_TYPE_AVAILABLE:

            # Enumeration is for Outdoor Weather Bricklet
            if device_identifier == BrickletOutdoorWeather.DEVICE_IDENTIFIER:
                logger.info("Found sensor %s at %s", uid, position.capitalize())
                ow = BrickletOutdoorWeather(uid, self.ipcon)
                # Enable sensor data callbacks
                ow.set_sensor_callback_configuration(True)
                ow.register_callback(ow.CALLBACK_SENSOR_DATA, self.callback)
                self.sensor = ow
                self.set_led()

    # Callback handles reconnection of IP Connection
    def cb_connected(self, connected_reason):
        # 0 == manual
        # 1 == auto (reconnect)
        logger.info("reconnected - reason: %s", connected_reason)
        # Enumerate devices again. If we reconnected, the Bricks/Bricklets
        # may have been offline and the configuration may be lost.
        # In this case we don't care for the reason of the connection
        self.ipcon.enumerate()

    def set_led(self):
        if self.led_config == 'off':
            new_state = BrickletOutdoorWeather.STATUS_LED_CONFIG_OFF
        elif self.led_config == 'on':
            new_state = BrickletOutdoorWeather.STATUS_LED_CONFIG_ON
        elif self.led_config == 'heartbeat':
            new_state = BrickletOutdoorWeather.STATUS_LED_CONFIG_SHOW_HEARTBEAT
        elif self.led_config == 'status':
            new_state = BrickletOutdoorWeather.STATUS_LED_CONFIG_SHOW_STATUS
        if self.sensor is not None:
            self.sensor.set_status_led_config(new_state)


# Callback function for sensor data callback
def cb_sensor_data(identifier, temperature, humidity):
    logger.debug("Sensor: %s - Temperature: %s - Humidity: %s", identifier, temperature/10, humidity)

    payload = [
        {
            "measurement": "tinkerTemperature",
            "time": datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%SZ'),
            "tags": {
                "sensor": identifier
            },
            "fields": {
                "value": temperature / 10
            }
        },
        {
            "measurement": "tinkerHumidity",
            "time": datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%SZ'),
            "tags": {
                "sensor": identifier
            },
            "fields": {
                "value": humidity
            }
        }
    ]
    try:
        if client is not None:
            client.write_points(payload)
        else:
            logger.warning("missing InfluxDB client")
    except InfluxDBClientError as e:
        logger.exception(e)
    except Exception as e:
        logger.exception(e)
        exit(1)


def parse_args():
    parser = argparse.ArgumentParser(description="Send Tinkerforge outdoor weather data to InfluxDB")
    parser.add_argument("-v", "--verbose", action='store_true', default=False)
    parser.add_argument("--influxdb-host", default=os.getenv("INFLUXDB_HOST", None))
    parser.add_argument("--influxdb-port", default=os.getenv("INFLUXDB_PORT", 8086))
    parser.add_argument("--influxdb-user", default=os.getenv("INFLUXDB_USER", ""))
    parser.add_argument("--influxdb-password", default=os.getenv("INFLUXDB_PASSWORD", ""))
    parser.add_argument("--influxdb-database", default=os.getenv("INFLUXDB_DATABASE", "default"))
    parser.add_argument("--influxdb-ssl", default=True)
    parser.add_argument("--influxdb-insecure", default=False, action='store_true')
    parser.add_argument("--led", choices=['on', 'off', 'heartbeat', 'status'], default='status')
    parser.add_argument("--ip", help='brickd or master extension ip', required=True)
    parser.add_argument("--port", default=4223, type=int)
    return parser.parse_args()


if __name__ == "__main__":
    args = parse_args()

    if args.verbose:
        logger.setLevel(logging.DEBUG)
        ch.setLevel(logging.DEBUG)

    if args.influxdb_host is None:
        logger.warning("--influxdb-host is missing, running without data export")
    else:
        client = InfluxDBClient(args.influxdb_host, args.influxdb_port, args.influxdb_user, args.influxdb_password,
                                args.influxdb_database, ssl=args.influxdb_ssl, verify_ssl=not args.influxdb_insecure)

    exporter = OutdoorSensorExporter(args.ip, args.port, args.led, cb_sensor_data)

    signal.pthread_sigmask(signal.SIG_BLOCK, [signal.SIGINT, signal.SIGHUP, signal.SIGTERM])
    signal.sigwait([signal.SIGINT, signal.SIGHUP, signal.SIGTERM])
    logger.debug("goodbye")
